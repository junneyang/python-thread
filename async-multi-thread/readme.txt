1、python可以使用两种方法创建和启动线程，一是函数式；一是继承threading.Thread、重写run方法。
2、二者没有较大差异，通过测试，函数式性能表现略低于继承式。
3、多线程读写同一变量需要加同步锁，否则结果具有不确定性。
4、加锁增加了安全性，但同时也会有性能的损耗。
5、线程共享资源的时候，两个线程同时占有部分资源并且等待对方已经占有资源，会造成死锁。这类死锁可以通过编码规范进行控制。
6、最简单的情况，同一线程多次请求同一未释放锁，也会死锁。这类死锁可以通过python的可重入锁进行规避。
7、条件变量内部包含可重入锁用于在多线程、较复杂场景中申请锁、释放锁、唤醒其他无锁线程等操作，可用生产者-消费者模型进行模拟和解释。
8、同步队列是更加强大的线程同步工具，屏蔽了底层可重入锁、条件变量等细节问题，是比较成熟的生产者-消费者模型。


